- hosts: localhost
  connection: local
  gather_facts: false
  debugger: on_failed
  vars_files:
    - "{{ playbook_dir }}/../defaults/vars.yml"
  tasks:
    - name: Create build cache dir
      file:
        path: "{{ item }}"
        state: directory
        mode: 0700
      with_items:
        - "{{ packer_dir }}/packer_cache"
      tags:
        - prep
        - packer
      when: from_iso
    - name: Create project directory
      file:
        path: "{{ terraform_dir }}"
        state: directory
        mode: 0700
    - name: Create SSH key
      block:
        - command: ssh-keygen -f "{{ terraform_dir }}/{{ project_name}}.pkey" -N ""
          args:
            creates: "{{ terraform_dir }}/{{ project_name }}.pkey"
        - set_fact:
              ssh_public_key: "{{ lookup('file',  terraform_dir + '/' + project_name  + '.pkey.pub') | b64encode }}"
      when: ssh_public_key is not defined
      tags:
        - template
        - ssh
    - name: Template packer instructions
      template:
        src: "{{ packer_dir }}/{{ item.name }}.j2"
        dest: "{{ packer_dir }}/{{ item.name }}"
      when: from_iso and distro in item.distro
      with_items:
        - { name: "template.json", distro: ["centos", "ubuntu"] }
        - { name: "kickstart.ks", distro: ["centos"] }
        - { name: "variables.json", distro: ["centos", "ubuntu"] }
        - { name: "99-cloudinit.cfg", distro: ["centos", "ubuntu"] }
        - { name: "preseed", distro: ["ubuntu"] }
      tags:
        - template
        - packer
    - name: Create download dir
      file:
        path: "{{ packer_dir }}/build"
        state: directory
        mode: 0770
      when: not from_iso
    - name: Download base cloud image
      get_url:
        url: "{{ cloud_images | json_query(download_filter) | json_query('[*].url') | join('') }}"
        dest: "{{ download_cache_dir }}/{{ cloud_images | json_query(download_filter) | json_query('[*].iso_name') | join('') }}"
        mode: 0660
        checksum: "{{ cloud_images | json_query(download_filter) | json_query('[*].checksum') | join('') }}"
      with_items: "{{ vms }}"
      when: not item.from_iso
    - name: Template terraform instructions
      template:
        src: "{{ template_dir }}/terraform/{{ item.name }}.j2"
        dest: "{{ terraform_dir }}/{{ item.name }}"
      with_items:
        - { name: "main.tf" }
        - { name: "vars.tf" }
        - { name: "terraform.tfvars" }
        - { name: "ubuntu_bug-1573095.xsl" }
        - { name: "output.tf" }
        - { name: "inventory.tpl"}
      tags:
        - template
        - terraform
    - name: Execute build
      command: packer build -var-file=variables.json template.json
      args:
        chdir: "{{ packer_dir }}"
        creates: "{{ packer_dir }}/build/{{ vm_name }}"
      tags:
        - build
        - packer
      when: from_iso
    - name: Destroy current infrastructure
      terraform:
        project_path: "{{ terraform_dir }}"
        state: absent
      when: force_rebuild
    - name: Deploy via terraform
      terraform:
        project_path: "{{ terraform_dir }}"
        state: present
        force_init: true
      register: terraform_output
      tags:
        - deploy
        - terraform
    - name: Add host for provisioning
      add_host:
        name: "{{ item.key }}"
        group: terrakvm
        ansible_ssh_user: "{{ item.value.value.ssh_username }}"
        ansible_ssh_host: "{{ item.value.value.public_ip }}"
        ansible_ssh_private_key_file: "{{ terraform_dir }}/{{ project_name}}.pkey"
      with_dict: "{{ terraform_output.outputs }}"
    - name: Include global provisioning
      include_tasks:
        file: "{{ provisioning_tasks }}"
      when: provisioning_tasks is defined
    - name: Include per-host provisioning
      include_tasks:
        file: "{{ delegation.provisioning_playbook }}"
      loop: "{{ vms }}"
      loop_control:
        loop_var: delegation
      when: delegation.provisioning_playbook is defined
    - name: Create ssh config
      template:
        src: "{{ template_dir }}/ssh/config"
        dest: "{{ repo_dir }}/{{ project_name }}.config"
        mode: 0600
      with_dict: "{{ terraform_output.outputs }}"
    - name: Connection information
      debug:
        msg: [
          "Server: {{ item.key }}",
          "Connect: ssh -i {{ terraform_dir }}/{{ project_name }}.pkey {{ item.value.value.ssh_username}}@{{ item.value.value.public_ip }}"
      ]
      with_dict: "{{ terraform_output.outputs }}"
