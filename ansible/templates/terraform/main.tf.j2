provider "libvirt" {
  uri = "qemu:///system"
}

{% if network_name is defined %}
resource "libvirt_network" "dev" {
  name = "${var.network_name}"
  mode = "${var.network_mode}"
  addresses = ["${var.network_cidr}"]
  dhcp {
    enabled = "${var.dhcp_enabled}"
  }
}
{% endif %}

{% for vm in vms %}
data "template_file" "{{ vm.vm_name }}_user_data" {
  template = <<EOF
#cloud-config
users:
  - name: $${ssh_user}
    lock-passwd: true
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - $${ssh_public_key}
{% if vm.cloud_init_config is defined %}
{{ vm.cloud_init_config }}
{% endif %}
EOF
  vars {
    ssh_user = "${var.ssh_username}"
    ssh_public_key = "${var.ssh_public_key}"
  }
}

resource "libvirt_cloudinit_disk" "{{ vm.vm_name }}" {
  name       = "{{ vm.vm_name }}_cloudinit.iso"
  user_data  = "${data.template_file.{{ vm.vm_name }}_user_data.rendered}"
  meta_data  = <<EOF
    local-hostname: ${var.{{ vm.vm_name }}_vm_name}
EOF
  pool       = "${var.volume_pool}"
}

resource "libvirt_volume" "{{ vm.vm_name }}_root" {
  name = "${format("%s-%s", var.{{ vm.vm_name }}_vm_name, "root")}"
  pool = "${var.volume_pool}"
  source = "${var.{{ vm.vm_name }}_packer_image}"
}

resource "libvirt_domain" "{{ vm.vm_name }}" {
  name = "${var.{{ vm.vm_name }}_vm_name}"
  vcpu = "${var.{{ vm.vm_name }}_ncpu}"
  memory = "${var.{{ vm.vm_name }}_memory}"
  cloudinit = "${libvirt_cloudinit_disk.{{ vm.vm_name }}.id}"
  # Provide hostname, and address via cloudinit, as in generic image
  network_interface {
{% if network_name is defined %}
    network_id = "${libvirt_network.dev.id}"
{% else %}
    network_name = "${var.{{ vm.vm_name }}_network_name}"
{% endif %}
{% if not dhcp_enabled %}
    wait_for_lease = false
    addresses = ["${var.{{ vm.vm_name }}_address}"]
{% else %}
    wait_for_lease = true
{% endif %}
    hostname = "${var.{{ vm.vm_name }}_hostname}"
  }
  disk = [
    {
      volume_id = "${libvirt_volume.{{ vm.vm_name }}_root.id}"
    }
  ]
  boot_device {
    dev = ["hd", "network"]
  }
{% if vm.distro == 'ubuntu' and not from_iso %}
{% raw %}
  xml {
    xslt = "${file("ubuntu_bug-1573095.xsl")}"
  }
{% endraw %}
{% endif %}
}
{% endfor %}
