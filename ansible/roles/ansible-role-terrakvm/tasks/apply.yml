- name: Assert Volume Pools
  block:
    - virt_pool:
        command: list_pools
      register: volume_pool_list
    - assert:
        that:
          - volume_pool_list.list_pools | length > 0
        fail_msg: You need to have at least 1 volume pool preconfigured
  tags:
    - always

- name: Create project directory
  file:
    path: "{{ terraform_dir }}"
    state: directory
    mode: 0700
  tags:
    - always

- name: Create SSH key
  block:
    - command: ssh-keygen -f "{{ terraform_dir }}/{{ project_name}}.pkey" -N ""
      args:
        creates: "{{ terraform_dir }}/{{ project_name }}.pkey"
    - set_fact:
          ssh_public_key: "{{ lookup('file',  terraform_dir + '/' + project_name  + '.pkey.pub') | b64encode }}"
  when: ssh_public_key is undefined

- name: Create download dir
  file:
    path: "{{ packer_dir }}/build"
    state: directory
    mode: 0770

- name: Download base cloud image
  get_url:
    url: "{{ cloud_images | json_query(download_filter) | json_query('[*].url') | join('') }}"
    dest: "{{ download_cache_dir }}/{{ cloud_images | json_query(download_filter) | json_query('[*].iso_name') | join('') }}"
    mode: 0660
    checksum: "{{ cloud_images | json_query(download_filter) | json_query('[*].checksum') | join('') }}"
  with_items: "{{ vms }}"
  when: item.download_cloudimage | default('true')
  tags: download_cloud_image

- name: Template terraform instructions
  template:
    src: "terraform/{{ item.name }}.j2"
    dest: "{{ terraform_dir }}/{{ item.name }}"
  with_items:
    - { name: "main.tf" }
    - { name: "network.tf" }
    - { name: "vars.tf" }
    - { name: "terraform.tfvars" }
    - { name: "output.tf" }
    - { name: "inventory.tpl"}

- name: Destroy current infrastructure
  terraform:
    project_path: "{{ terraform_dir }}"
    state: absent
  when: force_rebuild

- name: Deploy via terraform
  terraform:
    project_path: "{{ terraform_dir }}"
    state: present
    force_init: true
  register: terraform_output

- name: Create ssh config
  template:
    src: terraform/ssh_config
    dest: "{{ repo_dir }}/{{ project_name }}.config"
    mode: 0600
  with_dict: "{{ terraform_output.outputs }}"

- name: Add host for provisioning
  add_host:
    name: "{{ item.key }}"
    group: terrakvm
    ansible_ssh_user: "{{ item.value.value.ssh_username }}"
    ansible_ssh_host: "{{ item.value.value.public_ip }}"
    ansible_ssh_private_key_file: "{{ terraform_dir }}/{{ project_name}}.pkey"
  with_dict: "{{ terraform_output.outputs }}"

- name: Include per-host provisioning
  include_tasks:
    file: "{{ ansible_dir }}/{{ delegation.provisioning_tasks }}"
  loop: "{{ vms }}"
  loop_control:
    loop_var: delegation
  when: delegation.provisioning_tasks is defined

- name: Connection information
  debug:
    msg: [
      "Server: {{ item.key }}",
      "Connect: ssh -i {{ terraform_dir }}/{{ project_name }}.pkey {{ item.value.value.ssh_username}}@{{ item.value.value.public_ip }}"
  ]
  with_dict: "{{ terraform_output.outputs }}"
