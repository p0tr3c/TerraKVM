- name: Assert Volume Pools
  block:
    - virt_pool:
        command: list_pools
      register: volume_pool_list
    - assert:
        that:
          - volume_pool_list.list_pools | length > 0
        fail_msg: You need to have at least 1 volume pool preconfigured
  tags:
    - always

- name: Create project directory
  file:
    path: "{{ terraform_dir }}"
    state: directory
    mode: 0700
  tags:
    - always


- name: Process Networks
  template:
    src: "terraform/{{ item.name }}.j2"
    dest: "{{ terraform_dir }}/{{ item.name }}"
  with_items:
    - { name: "network.tf" }
  when: networks | length > 0
  tags:
    - template

- name: Process Volumes
  template:
    src: "terraform/{{ item.name }}.j2"
    dest: "{{ terraform_dir }}/{{ item.name }}"
  with_items:
    - { name: "volume.tf" }
  when: volumes | length > 0
  tags:
    - template

- name: Process Instances
  include_tasks: instances.yml
  when: instances | length > 0
  tags:
    - always

- name: Template terraform instructions
  template:
    src: "terraform/{{ item.name }}.j2"
    dest: "{{ terraform_dir }}/{{ item.name }}"
  with_items:
    - { name: "provider.tf" }
    - { name: "vars.tf" }
    - { name: "terraform.tfvars" }
  tags:
    - template


- name: Destroy current infrastructure
  terraform:
    project_path: "{{ terraform_dir }}"
    state: absent
  when: force_rebuild
  tags:
    - apply

- name: Deploy via terraform
  terraform:
    project_path: "{{ terraform_dir }}"
    state: present
    force_init: true
  register: terraform_output
  tags:
    - apply

- name: Edit VM
  include_tasks:
    file: edit_xml.yml
  loop: "{{ instances }}"
  loop_control:
    loop_var: inner
  when:
    - inner.gdbstub is defined
      #- inner.console is defined
  tags:
    - apply

- name: Create ssh config
  template:
    src: terraform/ssh_config
    dest: "{{ repo_dir }}/{{ project_name }}.config"
    mode: 0600
  with_dict: "{{ terraform_output.outputs }}"
  when: instances | length > 0

- name: Connection information
  debug:
    msg: [
      "Server: {{ item.key }}",
      "Connect: ssh -i {{ terraform_dir }}/{{ project_name }}.pkey {{ item.value.value.ssh_username}}@{{ item.value.value.public_ip }}"
  ]
  with_dict: "{{ terraform_output.outputs }}"
  when: instances | length > 0



