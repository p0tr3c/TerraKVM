#jinja2: lstrip_blocks: "True", trim_blocks: "True"
provider "libvirt" {
    uri = "qemu:///system"
}

{% if networks is defined %}
  {%- for net in networks %}
resource "libvirt_network" "{{ net.name }}" {
    name = "${var.{{ net.name }}}"
    mode = "${var.{{ net.name }}_mode}"
    {% if net.domain is defined %}
    domain = "${var.{{ net.name }}_domain}"
    {% endif %}
    {% if net.addresses is defined %}
    addresses = "${var.{{ net.name }}_addresses}"
    {% endif %}
    {% if net.bridge is defined %}
    bridge = "${var.{{ net.name }}_bridge}"
    {% endif %}
    {% if net.mtu is defined %}
    mtu = "${var.{{ net.name }}_mtu}"
    {% endif %}
    {% if net.autostart is defined %}
    autostart = "${var.{{ net.name }}_autostart}"
    {% endif %}
    {% if net.routes is defined %}
    routes = "${var.{{ net.name }}_routes}"
    {% endif %}
    {% if net.dns is defined %}
    dns = {
      {% for key, value in net.dns.items() %}
        {% if key == "local_only" %}
        local_only = "{{ value }}"
        {% endif %}
        {% if key == "enabled" %}
        enabled = "{{ value }}"
        {% endif %}
      {% endfor %}
    }
    {% endif %}
    {% if net.dhcp is defined %}
    dhcp = {
      enabled = {{ net.dhcp }}
    }
    {% endif %}
}
  {% endfor %}
{% endif %}

{% for vm in vms %}
    {% if vm.cloud_init is undefined or not vm.cloud_init %}
data "template_file" "{{ vm.vm_name }}_user_data" {
    template = <<EOF
      {% if vm.cloud_config is undefined %}
#cloud-config
users:
  - name: $${ssh_user}
        {% if vm.passwd is defined and vm.passwd | length %}
    lock-passwd: false
    passwd: {{ vm.passwd }}
        {% else %}
    lock-passwd: true
        {% endif %}
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - $${ssh_public_key}
EOF
    vars {
        ssh_user = "${var.ssh_username}"
        ssh_public_key = "${var.ssh_public_key}"
    }
      {% else %}
{{ vm.cloud_config }}
EOF
    {{ vm.cloud_config_vars }}
      {% endif %}
}

resource "libvirt_cloudinit_disk" "{{ vm.vm_name }}" {
    pool   = "${var.volume_pool}"
    name       = "{{ vm.vm_name }}_cloudinit.iso"
    user_data  = "${data.template_file.{{ vm.vm_name }}_user_data.rendered}"
    meta_data  = <<EOF
local-hostname: ${var.{{ vm.vm_name }}_vm_name}
EOF
        {% if vm.cloudinit_net_config %}
    network_config = <<EOF
version: 1
config:
            {% for net in vm.networks %}
                {% if net.cloudinit is defined and net.cloudinit %}
  - type: physical
    name: {{ net.interface }}
                    {% if net.mac_address is defined %}
    mac_address: "{{ net.mac_address }}"
                    {% endif %}
    subnets:
      - type: {{ net.type | default('dhcp') }}
                    {% if net.type == "static" %}
        address: {{ net.address }}
                        {% if net.netmask is defined %}
        netmask: {{ net.netmask }}
                        {% endif %}
                        {% if net.gateway is defined %}
        gateway: {{ net.gateway }}
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% endfor %}
EOF
        {% endif %}
    pool       = "${var.volume_pool}"
}
    {% endif %}

    {% for disk in vm.disks %}
      {% if disk.type is undefined or disk.type != "iso" %}
resource "libvirt_volume" "{{ vm.vm_name }}_{{ disk.name }}"{
    name = "${var.{{ vm.vm_name }}_{{ disk.name }}}"
    pool = "${var.{{ vm.vm_name }}_{{ disk.name }}_pool}"
        {% if disk.size is defined %}
    size = "${var.{{ vm.vm_name }}_{{ disk.name }}_size}"
        {% endif %}
        {% if disk.source is defined %}
    source = "${var.{{ vm.vm_name }}_{{ disk.name }}_source}"
        {% endif %}
        {% if disk.base_volume_name is defined %}
    base_volume_name = "${var.{{ vm.vm_name }}_{{ disk.name }}_base_volume_name}"
    base_volume_pool = "${var.{{ vm.vm_name }}_{{ disk.name }}_base_volume_pool}"
        {% endif %}
}
      {% endif %}
    {% endfor %}

resource "libvirt_domain" "{{ vm.vm_name }}" {
    name = "${var.{{ vm.vm_name }}_vm_name}"
    vcpu = "${var.{{ vm.vm_name }}_ncpu}"
    cpu {
    {% if vm.cpu_mode is defined %}
        mode = "{{ vm_cpu_mod }}"
    {% else %}
        mode = "host-passthrough"
    {% endif %}
    }
    memory = "${var.{{ vm.vm_name }}_memory}"
    {% if vm.manual is undefined or not vm.manual %}
    cloudinit = "${libvirt_cloudinit_disk.{{ vm.vm_name }}.id}"
    {% endif %}
    # Provide hostname, and address via cloudinit, as in generic image
    {% for net in vm.networks %}
    network_interface {
        {% if net.bridge is defined %}
        bridge = "{{ net.bridge }}"
        {% else %}
            {% if net.external is defined and net.external %}
        network_name = "${var.{{ vm.vm_name }}_{{ net.network_name }}}"
            {% else %}
        network_id = "${libvirt_network.{{ net.network_name}}.id}"
            {% endif %}
            {% if net.address is not defined or net.type == "dhcp" %}
        wait_for_lease = true
                {% else %}
        wait_for_lease = false
        addresses = ["${var.{{ vm.vm_name }}_{{ net.network_name }}_address}"]
                {% endif %}
        hostname = "${var.{{ vm.vm_name }}_hostname}"
            {% endif %}
    }
    {% endfor %}
    disk = [
    {% for disk in vm.disks %}
        {%- if disk.type is defined and disk.type == "iso" %}
        {
            file = "${var.{{ vm.vm_name }}_{{ disk.name }}_source}"
        }
        {%- else %}
        {
          volume_id = "${libvirt_volume.{{ vm.vm_name }}_{{ disk.name }}.id}"
        }
        {% endif %}
        {% if not loop.last %},
        {% endif %}
    {% endfor %}
    ]
    boot_device {
    {% if vm.manual is defined and vm.manual %}
        dev = ["hd", "cdrom", "network"]
    {% else %}
        dev = ["hd", "network"]
    {% endif %}
    }
    {% if vm.distro == 'ubuntu' and not from_iso %}
        {% raw %}
    xml {
        xslt = "${file("ubuntu_bug-1573095.xsl")}"
    }
        {% endraw %}
    {% endif %}
    {% if vm.enable_console is defined and vm.enable_console %}
    console {
        type = "pty"
        target_port = "0"
        target_type = "serial"
    }
    {% endif %}
}
{% endfor %}

data "template_file" "inventory" {
    template = "${file("inventory.tpl")}"
    vars {
        ssh_user = "${var.ssh_username}"
        pkey_file_path = "${var.ssh_private_key_file}"
{% for vm in vms %}
    {% if vm.networks.0.address is defined %}
        {{ vm.vm_name }}_address = "${var.{{ vm.vm_name }}_{{ vm.networks.0.network_name }}_address}"
    {% else %}
        {{ vm.vm_name }}_address = "${libvirt_domain.{{ vm.vm_name }}.network_interface.0.addresses.0}"
    {% endif %}
{% endfor %}
    }
}
resource "local_file" "inventory" {
    content     = "${data.template_file.inventory.rendered}"
    filename = "${path.module}/inventory.yml"
}
