#jinja2: lstrip_blocks: "True", trim_blocks: "True"
{% if instances is defined %}
{% set base_distro_list=[] %}
    {% for instance in instances %}
        {% if instance.distro is undefined %}
{% set current_distro = default_instance_distro %}
        {% else %}
{% set current_distro = instance.distro %}
        {% endif -%}

        {% if instance.arch is undefined %}
{% set current_arch = default_instance_arch %}
        {% else %}
{% set current_arch = instance.arch %}
        {% endif -%}

{% set current_base_os = current_distro ~ "_" ~ current_arch %}
        {% if not current_base_os in base_distro_list %}
resource "libvirt_volume" "{{ current_base_os }}_os_base" {    
{% set terraform_loop_iso_filter = "[?distro=='"+ current_distro +"' && arch=='" + current_arch +"'].iso_name" %}
    name = "{{ project_name }}_{{ current_base_os }}_os_base"
    pool = "{{ default_libvirt_storage_pool }}"
    source = "{{ download_cache_dir }}/{{ cloud_images | json_query(terraform_loop_iso_filter) | join('')}}"
}
{{ base_distro_list.append(current_base_os) }}
        {% endif -%}

        {% if instance.disks is undefined %}
resource "libvirt_volume" "{{ instance.name }}_root" {
    name = "{{ project_name }}_dom_vol_{{ instance.name }}_root"
    base_volume_id = libvirt_volume.{{ current_base_os }}_os_base.id
}
        {% else %}
            {% for disk in instance.disks %}
resource "libvirt_volume" "{{ instance.name }}_{{ disk.name }}" {
    name = "{{ project_name }}_dom_vol_{{ instance.name }}_{{ disk.name }}"
    {% if disk.pool is defined %}
    pool = "{{ disk.pool }}"
    {% endif -%}

    {%- if disk.source is defined %}
    source = "{{ disk.source }}"
    {% endif %}

    {%- if disk.size is defined %}
    size = {{ disk.size }}
    {% endif %}

    {%- if disk.base_volume_id is defined %}
    base_volume_id = {{ disk.base_volume_id }}
    {% elif disk.name == "root" %}
    base_volume_id = libvirt_volume.{{ current_base_os }}_os_base.id
    {% endif %}

    {%- if disk.base_volume_name is defined %}
    base_volume_name = "{{ disk.base_volume_name }}"
    {% endif %}

    {%- if disk.base_volume_pool is defined %}
    base_volume_pool = "{{ disk.base_volume_pool }}"
    {% endif %}
}
            {% endfor %}
        {% endif %}

resource "libvirt_domain" "{{ instance.name }}" {
    name = var.dom_{{ instance.name }}
    cpu = {
        mode = var.dom_{{ instance.name }}_cpu
    }
    vcpu = var.dom_{{ instance.name }}_vpcu
    memory = var.dom_{{ instance.name }}_memory 
    running = var.dom_{{ instance.name }}_running

    {% if instance.disks is undefined %}
    disk {
        volume_id = libvirt_volume.{{ instance.name }}_root.id
    }
    {% else %}
        {% for disk in instance.disks %}
            {%- if disk.file is defined %}
    disk {
        file = "{{ disk.file }}"
    }
            {% elif disk.url is defined %}
    disk {
        url = "{{ disk.url }}"
    }
            {% elif disk.volume_id is defined %}
    disk {
        volume_id = {{ disk.volume_id }}
    }
            {% else %}
    disk {
        volume_id = libvirt_volume.{{ instance.name }}_{{ disk.name }}.id
    }
            {% endif %}
        {% endfor %}
    {% endif %}
    {% if instance.networks is defined %}
        {% for net in instance.networks %}
        network_interface {
            {% if net.name is defined %}
            network_name = "{{ net.name }}"
            {% endif -%}

            {% if net.network_id is defined %}
            network_id = {{ net.network_id }}
            {% endif -%}

            {% if net.mac is defined %}
            mac = {{ net.mac }}
            {% endif -%}

            {% if net.addresses is defined %}
            addresses = [
                {% for net_addr in net.addresses %}
                "{{ net_addr }}"
                {% if not loop.last %},
                {% endif %}
                {% endfor %}
            ]
            {% endif -%}

            {% if net.hostname is defined %}
            hostname = {{ net.hostname }}
            {% endif -%}

            {% if net.wait_for_lease is defined and not net.wait_for_lease %}
            wait_for_lease = false
            {% else %}
            wait_for_lease = true
            {% endif %}
        }
        {% endfor %}
    {% endif -%}

    {% if instance.cloudinit is defined %}
    cloudinit = {{ instance.cloudinit }}
    {% elif instance.raw is undefined %}
    cloudinit = libvirt_cloudinit_disk.generic_cloudinit_iso.id
    {% endif -%}

    {% if instance.autostart is defined and not instance.autostart %}
    autostart = false
    {% endif -%}

    console {
        type = "pty"
        target_port = "0"
        target_type = "serial"
    }

    {% if instance.filesystem is defined %}
    filesystem {
        source = {{ instance.filesystem.source }}
        target = {{ instance.filesystem.target }}
        {% if instance.filesystem.readonly is defined and instance.filesystem.readonly %}
        readonly = true
        {% else %}
        readonly = false
        {% endif %}
    }
    {% endif %}
}

  {% endfor %}
{% endif %}

