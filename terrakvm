#!/bin/bash

function parse_extra_args(){
  while getopts "p:e:" opt; do
    case ${opt} in
      p )
        project=$OPTARG
        ;;
      e )
        extra_args+=("-e $OPTARG")
        ;;
      \? )
        echo "Invalid Option: -$OPTARG" 1>&2
        exit 1
        ;;
      : )
        echo "Invalid Option: -$OPTARG requires an argument" 1>&2
        exit 1
        ;;
    esac
  done
  shift $((OPTIND -1))
}

function pre_assert(){
  parse_extra_args "$@"

  which docker-compose > /dev/null 2>&1
  if [ "$?" -ne 0 ]; then
    echo "[-] docker-compose not in system path!"
    exit 1
  fi

  if [ -z "$SUDO_UID" ]; then
    SUDO_UID=`id -u`
    SUDO_GID=`id -g`
  fi

  export SUDO_UID="$SUDO_UID"
  export SUDO_GID="$SUDO_GID"
  export LIBVIRT_GID=`getent group libvirt | awk -F: '{print $3}'`
  export KVM_GID=`getent group kvm | awk -F: '{print $3}'`

  if ! [ -z "$project" ]; then
    PROJECT_ABS_PATH=`readlink -f $project`
    PROJECT_FILENAME=`basename $project`
  fi
}

function do_dev(){
  pre_assert $@
  if [ -z "$PROJECT_FILENAME" ]; then
      docker-compose run terrakvm ansible-playbook playbooks/dev.yml "${extra_args[@]}"
  else
      docker-compose run -v "$PROJECT_ABS_PATH":/TerraKVM/ansible/"$PROJECT_FILENAME" terrakvm ansible-playbook playbooks/dev.yml -e "@$PROJECT_FILENAME" "${extra_args[@]}"
  fi
}

function do_apply(){
  pre_assert $@
  if [ -z "$PROJECT_FILENAME" ]; then
      docker-compose run terrakvm ansible-playbook playbooks/apply.yml "${extra_args[@]}"
  else
      docker-compose run -v "$PROJECT_ABS_PATH":/TerraKVM/ansible/"$PROJECT_FILENAME" terrakvm ansible-playbook playbooks/apply.yml -e "@$PROJECT_FILENAME" "${extra_args[@]}"
  fi
}

function do_destroy(){
  pre_assert $@
  if [ -z "$PROJECT_FILENAME" ]; then
      docker-compose run terrakvm ansible-playbook playbooks/destroy.yml "${extra_args[@]}"
  else
      docker-compose run -v "$PROJECT_ABS_PATH":/TerraKVM/ansible/"$PROJECT_FILENAME" terrakvm ansible-playbook playbooks/destroy.yml -e "@$PROJECT_FILENAME" "${extra_args[@]}"
  fi
}

function do_build(){
  pre_assert "$@"
  if [ -z "$project" ]; then
      echo "[-] build requires project spec (-p)"
      exit 1
  fi
  docker-compose run -v "$PROJECT_ABS_PATH":/TerraKVM/ansible/"$PROJECT_FILENAME" terrakvm ansible-playbook playbooks/build.yml -e "@$PROJECT_FILENAME" "${extra_args[@]}"
}

function do_init(){
  pre_assert "$@"
  docker-compose build
}

function do_shell(){
  pre_assert "$@"
  docker-compose run terrakvm /bin/bash
}

function do_preconfig(){
  cat > ./default.xml <<EOF
<pool type="dir">
  <name>default</name>
  <target>
    <path>/var/lib/libvirt/images</path>
  </target>
</pool>
EOF
  virsh --connect qemu:///system pool-define ./default.xml 2>/dev/null && rm -rf ./default.xml
  virsh --connect qemu:///system pool-start default  2>/dev/null
  virsh --connect qemu:///system pool-autostart default 2>/dev/null

  virsh --connect qemu:///system net-start default 2>/dev/null
  virsh --connect qemu:///system net-autostart default 2>/dev/null
}

function main(){
  project=""
  while getopts ":h" opt; do
    case ${opt} in
      h )
        echo "Usage:"
        echo "    $0 -h                      Display this help message."
        echo "    $0 apply <project>         Deploy <project>."
        echo "    $0 destroy <project>       Destroy <project>."
        echo "    $0 build <project>         Build <project>."
        echo "    $0 init                    Initialize TerraKVM."
        exho "    $0 dev                     Run development playbooks."
        exit 0
        ;;
     \? )
       echo "Invalid Option: -$OPTARG" 1>&2
       exit 1
       ;;
    esac
  done
  shift $((OPTIND -1))

  subcommand=$1; shift
  case "$subcommand" in
    preconfig)
      do_preconfig $@
      ;;
    dev)
      do_dev $@
      ;;
    apply)
      do_apply $@
      ;;
    destroy)
      do_destroy $@
      ;;
    build)
      do_build $@
      ;;
    init)
      do_init $@
      ;;
    shell)
      do_shell $@
      ;;
    *)
      echo "[-] Unknown command"
      exit 1
      ;;
  esac
}

main "$@"
